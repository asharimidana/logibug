AllCops:
  Exclude:
    - 'db/**/*'
    - 'config/**/*'
    - 'script/**/*'
    - 'bin/{rails,rake}'
    - !ruby/regexp /old_and_unused\.rb$/
Layout/LineLength:
  Max: 120
  AllowedPatterns: ['^(\s*#)']

Style/FrozenStringLiteralComment:
  Enabled: false

Style/Documentation:
  Enabled: false

Metrics/MethodLength:
  Enabled: true
  CountComments: false  # count full line comments?
  Max: 15
#  Exclude :
#  - 'app/controllers/api/v1/'

Lint/EachWithObjectArgument:
  Enabled: false 

Lint/RedundantWithObject:
  Enabled: false 

Metrics/AbcSize:
  Enabled: false

Style/ClassAndModuleChildren:
  Description: 'Checks style of children classes and modules.'
  StyleGuide: '#namespace-definition'
  # Moving from compact to nested children requires knowledge of whether the
  # outer parent is a module or a class. Moving from nested to compact requires
  # verification that the outer parent is defined elsewhere. RuboCop does not
  # have the knowledge to perform either operation safely and thus requires
  # manual oversight.
  SafeAutoCorrect: false
  Enabled: false 
  VersionAdded: '0.19'
  #
  # Basically there are two different styles:
  #
  # nested - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # compact - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # The compact style is only forced, for classes or modules with one child.
  EnforcedStyle: nested
  SupportedStyles:
    - nested
    - compact
